# AUTOGENERATED! DO NOT EDIT! File to edit: 01_followers.ipynb (unless otherwise specified).

__all__ = ['get_followers', 'get_new_followers', 'get_updated_followers', 'save_followers', 'make_change',
           'save_change', 'update']

# Cell
import os
from datetime import datetime
from typing import *

import pandas as pd
from pyfacebook import IgProApi
from pyfacebook.error import *
from .core import *

# Cell
def get_followers() -> Tuple[str, Dict[str, int]]:
    api = IgProApi(
        app_id=APP_ID, app_secret=APP_SECRET, long_term_token=TOKEN, version="5.0"
    )
    try:
        response = api.get_user_insights(
            user_id=USER_ID,
            period="lifetime",
            metrics=["audience_country"],
            return_json=True,
        )[0]["values"][0]
        return response["end_time"].split("T")[0], response["value"]
    except PyFacebookException as e:
        return (e.message, {0: 0})

# Cell
def get_new_followers() -> Tuple[str, Dict[str, int]]:
    api = IgProApi(
        app_id=APP_ID, app_secret=APP_SECRET, long_term_token=TOKEN, version="5.0"
    )
    try:
        response = api.get_user_insights(
                user_id=USER_ID,
                period="day",
                metrics=["follower_count"],
                return_json=True,
            )[0]["values"][0]
        return response["end_time"].split("T")[0], response["value"]
    except PyFacebookException as e:
        return (e.message, 0)

# Cell
def get_updated_followers(
    df: pd.DataFrame, data: Dict[str, int], end_time: str
) -> pd.DataFrame:
    new_followers = pd.Series(data)
    end_time = datetime.strptime(end_time, "%Y-%m-%d").strftime(f"%b %d %Y{' '*16}")
    new_followers.name = f"{end_time} {str(datetime.utcnow()).split('.')[0]}"
    if new_followers.name not in df.columns:
        df = pd.concat([df, new_followers], axis=1)
        df = df[[df.columns[-1]] + df.columns[:-1].tolist()]
        df.index.name = "countries"
    df.sort_index(inplace=True)
    return df.fillna(0).astype(int)

# Cell
def save_followers() -> str:
    df = get_df("History")
    end_time, followers = get_followers()
    df = get_updated_followers(df, followers, end_time)
    write_df(df, "History")
    return end_time

# Cell
def make_change(df: pd.DataFrame) -> pd.DataFrame:
    change_df = df.diff(axis=1, periods=-1)
    change_df = change_df.fillna(0).astype(int)
    zeros_mask  = (change_df != 0).any(axis=0)
    change_df = change_df.loc[:, zeros_mask]
    change_df = change_df.applymap(lambda x: f"+{x}" if x > 0 else x)
    change_df = "(" + change_df.astype(str) + ")" + " " + df.loc[:, zeros_mask].astype(str)
    return change_df.replace(["\(0\) 0", "\(0\) "], "", regex=True)

# Cell
def save_change():
    df = get_df("History")
    change_df = make_change(df)
    write_df(change_df, "Change History")

# Cell
def update(event: Dict = None, context=None,):
    get_followers()
    time = save_followers()
    save_change()
    return f"Updated followers from '{time}' in 'History' and 'Change History'"