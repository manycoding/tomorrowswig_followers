# AUTOGENERATED! DO NOT EDIT! File to edit: 02_ads.ipynb (unless otherwise specified).

__all__ = [
    "AD_ACC_ID",
    "account",
    "get_dif",
    "COLUMNS",
    "get_insights",
    "get_action",
    "get_followers_change",
    "get_insights_df",
    "create_insights",
]

# Cell
from .core import *

# Cell
import os
from typing import *

from datetime import datetime, timedelta
from functools import partial

import pandas as pd
import numpy as np
from facebook_business.api import FacebookAdsApi
from facebook_business.adobjects.adaccount import AdAccount
import pycountry

AD_ACC_ID = os.environ.get("AD_ACC_ID")

# Cell
FacebookAdsApi.init(APP_ID, APP_SECRET, TOKEN)
account = AdAccount(AD_ACC_ID)

# Cell
def get_dif(df: pd.DataFrame) -> pd.DataFrame:
    change_df = df.diff(axis=1, periods=-1)
    change_df = change_df.fillna(0).astype(int)
    return change_df


# Cell
# "Relevance Score",
COLUMNS = [
    "Ad Name",
    "New Followers",
    "% (Clicks)",
    "% (Impressions)",
    "Cost Per Follow",
    "Clicks (All)",
    "Link Clicks",
    "CPC (All)",
    "CPC (Cost per Link Click)",
    "CTR (All)",
    "CPM (Cost per 1,000 Impressions)",
    "Amount Spent (USD)",
    "Impressions",
    "Reach",
    "Post Reactions",
    "Post Shares",
    "Video Average Play Time",
    "Video Plays at 50%",
    "Video Plays at 75%",
    "Video Plays at 95%",
]

# Cell
get_insights = partial(
    account.get_insights,
    fields=[
        "ad_name",
        "clicks",
        "cpc",
        "ctr",
        "cpm",
        "cost_per_action_type",
        "spend",
        "impressions",
        "reach",
        "actions",
        "video_avg_time_watched_actions",
        "video_p50_watched_actions",
        "video_p75_watched_actions",
        "video_p95_watched_actions",
    ],
    params={"level": "ad", "date_preset": "yesterday",},
)

# Cell


def get_action(cell, name):
    action = [a for a in cell if a["action_type"] == name]
    if action:
        return action[0]["value"]
    return 0


# Cell
def get_followers_change(date: datetime) -> pd.DataFrame:
    history_df = get_df("History")
    new_followers = get_dif(history_df)
    followers_date = (date - timedelta(days=1)).strftime("%b %d")
    new_followers = new_followers.iloc[
        :, new_followers.columns.str.startswith(followers_date)
    ].replace(0, np.nan)
    return new_followers.dropna(axis=1, how="all").dropna().astype(int)


# Cell
def get_insights_df(insights: List) -> Tuple[pd.DataFrame, str]:
    df = pd.DataFrame(insights)
    floats = ["cpc", "cpm", "ctr", "spend"]
    df[floats] = df[floats].astype(float).round(2)
    ints = ["clicks", "impressions", "reach"]
    df[ints] = df[ints].astype(int)
    index = df["ad_name"].apply(
        lambda x: pycountry.countries.search_fuzzy(x.split("-")[1].strip())[0].alpha_2
    )
    index.name = "countries"
    df.set_index(index, inplace=True)
    df.sort_values("ad_name", inplace=True)

    date = datetime.strptime(df["date_start"].values[0], "%Y-%m-%d")
    worksheet_name = date.strftime("%b %d %Y")

    df["Post Reactions"] = df["actions"].apply(
        partial(get_action, name="post_reaction")
    )
    df["Post Shares"] = df["actions"].apply(partial(get_action, name="post"))
    df["Link Clicks"] = df["actions"].apply(partial(get_action, name="link_click"))
    df["CPC (Cost per Link Click)"] = (
        df["cost_per_action_type"]
        .apply(partial(get_action, name="link_click"))
        .astype(float)
    )
    get_video_action = partial(get_action, name="video_view")
    df["Video Average Play Time"] = df["video_avg_time_watched_actions"].apply(
        get_video_action
    )
    df["Video Plays at 50%"] = df["video_p50_watched_actions"].apply(get_video_action)
    df["Video Plays at 75%"] = df["video_p75_watched_actions"].apply(get_video_action)
    df["Video Plays at 95%"] = df["video_p95_watched_actions"].apply(get_video_action)

    df.drop(
        columns=[
            "actions",
            "cost_per_action_type",
            "date_start",
            "date_stop",
            "video_avg_time_watched_actions",
        ]
        + [f"video_p{p}_watched_actions" for p in [50, 75, 95]],
        inplace=True,
    )

    df["New Followers"] = get_followers_change(date)

    df["% (Clicks)"] = (df["New Followers"] / df["clicks"] * 100).round().astype(int)
    df["% (Impressions)"] = df["New Followers"] / df["impressions"] * 100
    df["Cost Per Follow"] = df["spend"] / df["New Followers"]
    to_round = ["Cost Per Follow", "% (Impressions)", "CPC (Cost per Link Click)"]
    df[to_round] = df[to_round].round(2)
    df.rename(
        columns={
            "ad_name": "Ad Name",
            "clicks": "Clicks (All)",
            "cpc": "CPC (All)",
            "ctr": "CTR (All)",
            "cpm": "CPM (Cost per 1,000 Impressions)",
            "reach": "Reach",
            "impressions": "Impressions",
            "spend": "Amount Spent (USD)",
        },
        inplace=True,
    )
    return df[COLUMNS].replace(0, ""), worksheet_name


# Cell


def create_insights(event: Dict = None, context=None,) -> str:
    insights = get_insights()
    df, worksheet_name = get_insights_df(insights)
    write_df(df, f"{worksheet_name}")
    return "Success"
